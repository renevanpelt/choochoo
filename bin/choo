#!/usr/bin/env ruby

require 'colorize'
require 'active_support/inflector'


def model_file(resource_name,fields)
  capitalized_name = resource_name.split('_').collect(&:capitalize).join
<<-EOF
# This should not be configuration, therefore it explicitly is until the 
# framework allows the user to manage their databases using migrations

AggregateRecord::Schema.define do

  self.verbose = true

  create_table(:#{resource_name}, force: true) do |t|
    t.string      :uuid,             null: false
    #{fields.map{|f| "t.#{f['type']}\t\t:#{f['field']}" }.join("\n    ")}
    t.datetime    :created_at,       null: false
    t.integer     :version,          null: false
  end



end


class #{capitalized_name.singularize} < AggregateRecord::Base

  def to_s
    uuid
  end

end

EOF
end



def create_command_file(resource_name,fields)
  capitalized_name = resource_name.split('_').collect(&:capitalize).join
<<-EOF
require 'choo/base_command'
module Choo
  module Resource
    module #{capitalized_name}
      module Command
        class Create < Choo::BaseCommand

          def self.schema
            Parametric::Schema.new do
              #{fields.map{|f| "field(:#{f['field']}).type(:#{f['type']}).present" }.join("\n              ")}
              # field(:#{resource_name}_type).options(#{capitalized_name}Types.symbols).default(#{capitalized_name}Types.default)
            end
          end

          def event_type
            Choo::Resource::#{capitalized_name}::Events::Created
          end

        end
      end
    end
  end
end
EOF
end

def created_event_file(resource_name,fields)

  capitalized_name = resource_name.split('_').collect(&:capitalize).join
<<-EOF
require 'choo/base_event'

module Choo
  module Resource
    module #{capitalized_name}
      module Events


        class Created < Choo::BaseEvent

          def self.apply_to_aggregate(aggregate, payload = {})
            copy = aggregate
            #{fields.map{|f| "copy.fields['#{f['field']}'] = payload['#{f['field']}']" }.join("\n            ")}
            return copy 
          end

          # def self.publish_to
          #   self
          # end

          def perform(event)
            #{capitalized_name.singularize}.create!(
              #{fields.map{|f| "#{f['field']}: event.payload['#{f['field']}'],"}.join("\n              ")}
              uuid: event.aggregate_id,
              version: event.version
            )
          end
        end
      end
    end
  end
end
EOF
end




def update_command_file(resource_name,fields)
  capitalized_name = resource_name.split('_').collect(&:capitalize).join
<<-EOF
require 'choo/base_command'
module Choo
  module Resource
    module #{capitalized_name}
      module Command
        class Update < Choo::BaseCommand

          def self.schema
            Parametric::Schema.new do
              #{fields.map{|f| "field(:#{f['field']}).type(:#{f['type']}).present" }.join("\n              ")}

            end
          end

          def event_type
            Choo::Resource::#{capitalized_name}::Events::Updated
          end

        end
      end
    end
  end
end
EOF
end


def updated_event_file(resource_name,fields)

  capitalized_name = resource_name.split('_').collect(&:capitalize).join
<<-EOF
require 'choo/base_event'

module Choo
  module Resource
    module #{capitalized_name}
      module Events
        class Updated < Choo::BaseEvent

          def self.apply_to_aggregate(aggregate, payload = {})
            copy = aggregate
            #{fields.map{|f| "copy.fields['#{f['field']}'] = payload['#{f['field']}']" }.join("\n            ")}
            return copy 
          end

          def self.publish_to
            self
          end

          def perform(event)
            obj = #{capitalized_name.singularize}.find_by(uuid: event.aggregate_id)
            return obj.update(event.payload)
          end
        end
      end
    end
  end
end
EOF
end






def aggregate_database_schema_configuration
<<-EOF


# This should not be configuration, therefore it explicitly is until the 
# framework allows the user to manage their databases using migrations

AggregateRecord::Schema.define do

  self.verbose = true

end
EOF
end

def gemfile
<<-EOF

source 'https://rubygems.org'
# gem 'choochoo', path: "/Users/renevanpelt/ruby/event_sourcing_cqrs/gem"
gem 'choochoo', :git => 'https://github.com/renevanpelt/choochoo.git', :branch => 'master'

gem 'parametric'
gem 'pusher'

EOF
end

def mainrb
<<-EOF



require 'choo'



application = Choo::Application.new

require 'haml'
require 'sinatra'
require 'sinatra/base'

before do
   headers 'Access-Control-Allow-Origin' => '*', 
            'Access-Control-Allow-Methods' => ['OPTIONS', 'GET', 'POST', 'PATCH']  
end

use AdminController

run Choo::RoutingController




EOF
end

def routesyml
<<-EOF
routes:
  /:
    get:
      summary: Home page
      response: Hello, world!

  /about:
    get:
      summary: About page
      response: This is the about page
    post:
      summary: About POST
      response: This is the about page



EOF
end





def create_directory(directory)
  FileUtils.mkdir_p directory
  puts "Directory with name '#{directory}' created".green
end

def create_file(filename, content)

  File.open(filename, 'w') do |file|
    file.write content
  end
  puts "File with name '#{filename}' created".green


end

arguments = ARGV
command = arguments.first

# 
# The new command
# 

if command == "new"
  app_name = arguments[1]
  if app_name
    if File.directory?(app_name)
      puts "Directory with name '#{app_name}' already exists".red
    else
      create_directory(app_name)
      create_directory("#{app_name}/config")
      create_directory("#{app_name}/resources")
      create_directory("#{app_name}/controllers")
      create_file("#{app_name}/config/aggregate_database.rb", aggregate_database_schema_configuration)
      create_file("#{app_name}/seeds.rb",  "" )
      create_file("#{app_name}/Gemfile", gemfile)
      create_file("#{app_name}/main.ru", mainrb)
      create_file("#{app_name}/config/routes.yml", routesyml)
    end
  else
    puts "Please supply a name for your app like this: choo new [APP NAME]".red
  end


# 
# The server command
# 

elsif command == "server" ||  command == "s"
  parameter_string = arguments[1..-1].join(" ")
  `rackup main.ru #{parameter_string}`

elsif command == "generate" || command == "g"


  what_to_generate = arguments[1]

  if what_to_generate == "resource"
    resource_to_generate = arguments[2]
    fields = arguments[3..-1]
    validated_fields = []
    fields.each do |field|
      parts = field.split(":")
      if parts.count == 2
        name = parts[0]
        type = parts[1]
        validated_fields  << {'field' => name, 'type' => type}
      else
        raise StandardError
      end
    end

    create_directory("resources/#{resource_to_generate}")
    create_directory("resources/#{resource_to_generate}/commands")
    create_directory("resources/#{resource_to_generate}/events")
    create_directory("resources/#{resource_to_generate}/controllers")
    create_file("resources/#{resource_to_generate}/#{resource_to_generate.singularize}.rb", model_file(resource_to_generate, validated_fields))
    create_file("resources/#{resource_to_generate}/events/created.rb", created_event_file(resource_to_generate, validated_fields))
    create_file("resources/#{resource_to_generate}/events/updated.rb", updated_event_file(resource_to_generate, validated_fields))
    create_file("resources/#{resource_to_generate}/commands/update.rb", update_command_file(resource_to_generate, validated_fields))
    create_file("resources/#{resource_to_generate}/commands/create.rb", create_command_file(resource_to_generate, validated_fields))

  else
    puts "Don't know how to generate '#{command}'. At this time only resources and controllers can be generated using 'choo g resource'.".red
  end

else
  puts "Command '#{command}' is unknown. 'new' and 'server' are the only available command at this time.".red
end


